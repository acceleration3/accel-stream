#ifndef ACCEL_STREAM_HEADER
#define ACCEL_STREAM_HEADER

#include <vector>
#include <stdexcept>

#include <cstdint>
#include <cstring>

#define _FILE_OFFSET_BITS 64
#include <cstdio>

#include <accel/endianess>
#include <accel/macros>
#include <accel/utf8>

namespace accel
{
    using byte_t = BYTE_TYPE;
    
    namespace stream
    {    
        enum class seek_references
	    {
		    begining,
		    current,
		    end
	    };

        enum class file_modes
        {
            text,
            binary
        };

        namespace details
        {
            static constexpr std::size_t max_string_size = 1024;

            static inline std::size_t calculate_offset(std::size_t memory_size, std::size_t position, std::size_t offset, seek_references reference)
            {
                std::size_t new_offset = 0;
                if (reference == seek_references::begining)
                {
                    new_offset = offset;
                }
                else if (reference == seek_references::current)
                {
                    std::size_t current_offset = position;
                    new_offset = current_offset + offset;
                }
                else // reference == seek_references::end
                {
                    std::size_t end_offset = memory_size - 1;
                    new_offset = end_offset - offset;
                }

                if (new_offset >= memory_size || new_offset < 0)
                    throw std::runtime_error("Seeking past memory limits.");

                return new_offset;
            }
        
            static inline FILE* fopen_utf8(const utf8::string& path, const utf8::string& mode)
            {
#if defined(PLATFORM_WINDOWS)
                return _wfopen(path.to_wstring().c_str(), mode.to_wstring().c_str());
#else
                return fopen(path.to_string().c_str(), mode.to_string().c_str());
#endif
            }

            static inline std::size_t ftell_64(FILE* file)
            {
#if defined(COMPILER_MSVC)
                return _ftelli64(file);
#else
                return ftello64(file);
#endif
            }

            static inline std::size_t fseek_64(FILE* file, std::size_t offset, int origin)
            {
#if defined(COMPILER_MSVC)
                return _fseeki64(file, offset, origin);
#else
                return fseeko64(file, offset, origin);
#endif
            }
        }

        class input_stream
        {
        public:
            virtual ~input_stream() = default;

            virtual void seek_read(std::size_t offset, seek_references reference) = 0;
            virtual std::size_t get_read_position() const = 0;
            virtual std::size_t read(byte_t* data, std::size_t size) = 0;
            virtual bool at_read_end() const = 0;

            template<typename T>
            input_stream& operator>>(T& data)
            {
                read(reinterpret_cast<byte_t*>(&data), sizeof(T));
                return *this;
            }

            template<endianess::endianesses Endianess = endianess::endianesses::host_endian, typename T>
            std::size_t read_object(T& object)
            {
                auto size = read(reinterpret_cast<byte_t*>(&object), sizeof(T));
                if (size != sizeof(T))
                    return 0;
                endianess::swap_endianess<endianess::endianesses::host_endian, Endianess>(object);
                return size;
            }

            template<endianess::endianesses Endianess = endianess::endianesses::host_endian, typename T>
            T read_object()
            {
                T result;
                auto size = read(reinterpret_cast<byte_t*>(&result), sizeof(T));
                if (size != sizeof(T))
                    throw std::runtime_error("Failed to read object from stream.");
                endianess::swap_endianess<endianess::endianesses::host_endian, Endianess>(result);
                return result;
            }

            template<typename T>
            std::size_t read_object_le(T& object)
            {
                return read_object<endianess::endianesses::little_endian>(object);
            }

            template<typename T>
            T read_object_le()
            {
                return read_object<endianess::endianesses::little_endian, T>();
            }

            template<typename T>
            std::size_t read_object_be(T& object)
            {
                return read_object<endianess::endianesses::big_endian>(object);
            }

            template<typename T>
            T read_object_be()
            {
                return read_object<endianess::endianesses::big_endian, T>();
            }

        protected:
            input_stream() = default;
        };

        class output_stream
        {
        public:
            virtual ~output_stream() = default;

            virtual void seek_write(std::size_t offset, seek_references reference) = 0;
            virtual std::size_t get_write_position() const = 0;
            virtual std::size_t write(const byte_t* data, std::size_t size) = 0;
            virtual bool at_write_end() const = 0;
            virtual void flush() = 0;

            template<typename T>
            output_stream& operator<<(const T& data)
            {
                write(reinterpret_cast<const byte_t*>(&data), sizeof(data));
                return *this;
            }

            template<endianess::endianesses Endianess, typename T>
            std::size_t write_object(const T& object)
            {
                T temp = object;
                endianess::swap_endianess<endianess::endianesses::host_endian, Endianess>(temp);
                return write(reinterpret_cast<const byte_t*>(&temp), sizeof(temp));
            }

            template<endianess::endianesses Endianess, typename T>
            std::size_t write_object(T&& object)
            {
                endianess::swap_endianess<endianess::endianesses::host_endian, Endianess>(object);
                return write(reinterpret_cast<const byte_t*>(&object), sizeof(object));
            }

            template<typename T>
            std::size_t write_object_be(const T& object)
            {
                return write_object<endianess::endianesses::big_endian>(object);
            }

            template<typename T>
            std::size_t write_object_le(T&& object)
            {
                return write_object<endianess::endianesses::little_endian>(std::forward<T>(object));
            }

        protected:
            output_stream() = default;
        };

        class input_output_stream : public input_stream, public output_stream {};

        class file_input_stream : public input_stream
        {
        public:
            file_input_stream() = default;

            file_input_stream(const utf8::string& path, file_modes mode)
            {
                m_file = details::fopen_utf8(path, mode == file_modes::binary ? "rb" : "rt");
                if (!m_file)
                    throw std::runtime_error("Failed to open file.");
            }
            
            ~file_input_stream()
            {
                if (m_file)
                    fclose(m_file);
            }

            ACC_NON_COPYABLE(file_input_stream);
            
            file_input_stream(file_input_stream&& other)
            {
                m_file = other.m_file;
                other.m_file = nullptr;
            }

            file_input_stream& operator=(file_input_stream&& other)
            {
                m_file = other.m_file;
                other.m_file = nullptr;
                return *this;
            }

            void seek_read(std::size_t offset, seek_references reference) override
            {
                int whence = static_cast<int>(reference);
                if (details::fseek_64(m_file, offset, whence) != 0)
                    throw std::runtime_error("Failed to seek file");
            }

            std::size_t get_read_position() const override
            {
                return details::ftell_64(m_file);
            }

            std::size_t read(byte_t* data, std::size_t size) override
            {
                std::ptrdiff_t read = fread(data, 1, size, m_file);
                if (read < 0)
                    throw std::runtime_error("Failed to read file");
                return read;
            }

            bool at_read_end() const override
            {
                return feof(m_file);
            }

        private:
            FILE* m_file;
        };

        class file_output_stream : public output_stream
        {
        public:
            file_output_stream() = default;

            file_output_stream(const utf8::string& path, file_modes mode)
            {
                m_file = details::fopen_utf8(path, mode == file_modes::binary ? "wb" : "wt");
                if (!m_file)
                    throw std::runtime_error("Failed to open file.");
            }
            
            ~file_output_stream()
            {
                if (m_file)
                    fclose(m_file);
            }

            ACC_NON_COPYABLE(file_output_stream);

            file_output_stream(file_output_stream&& other)
            {
                m_file = other.m_file;
                other.m_file = nullptr;
            }

            file_output_stream& operator=(file_output_stream&& other)
            {
                m_file = other.m_file;
                other.m_file = nullptr;
                return *this;
            }

            void seek_write(std::size_t offset, seek_references reference) override
            {
                int whence = static_cast<int>(reference);
                if (details::fseek_64(m_file, offset, whence) != 0)
                    throw std::runtime_error("Failed to seek file");
            }

            std::size_t get_write_position() const override
            {
                return details::ftell_64(m_file);
            }

            std::size_t write(const byte_t* data, std::size_t size) override
            {
                return fwrite(data, 1, size, m_file);
            }

            bool at_write_end() const override
            {
                return feof(m_file);
            }

            void flush() override
            {
                fflush(m_file);
            }

        private:
            FILE* m_file;
        };
    
        class file_stream : public input_output_stream
        {
        public:
            file_stream() = default;

            file_stream(const utf8::string& path, file_modes mode)
            {
                fclose(details::fopen_utf8(path, "a+"));
                m_file = details::fopen_utf8(path, mode == file_modes::binary ? "r+b" : "r+t");
                if (!m_file)
                    throw std::runtime_error("Failed to open file.");
            }

            ~file_stream()
            {
                if (m_file)
                    fclose(m_file);
            }

            ACC_NON_COPYABLE(file_stream);
            
            file_stream(file_stream&& other)
            {
                m_file = other.m_file;
                other.m_file = nullptr;
            }

            file_stream& operator=(file_stream&& other)
            {
                m_file = other.m_file;
                other.m_file = nullptr;
                return *this;
            }

            void seek_read(std::size_t offset, seek_references reference) override
            {
                int whence = static_cast<int>(reference);
                if (details::fseek_64(m_file, offset, whence) != 0)
                    throw std::runtime_error("Failed to seek file");
            }

            std::size_t get_read_position() const override
            {
                return details::ftell_64(m_file);
            }

            std::size_t read(byte_t* data, std::size_t size) override
            {
                return fread(data, 1, size, m_file);
            }

            bool at_read_end() const override
            {
                return feof(m_file);
            }

            bool at_write_end() const override
            {
                return feof(m_file);
            }

            void seek_write(std::size_t offset, seek_references reference) override
            {
                int whence = static_cast<int>(reference);
                if (details::fseek_64(m_file, offset, whence) != 0)
                    throw std::runtime_error("Failed to seek file");
            }

            std::size_t get_write_position() const override
            {
                return details::ftell_64(m_file);
            }

            std::size_t write(const byte_t* data, std::size_t size) override
            {
                return fwrite(data, 1, size, m_file);
            }

            void flush() override
            {
                fflush(m_file);
            }

        private:
            FILE* m_file;
        };

        class memory_input_stream : public input_stream
        {
        public:
            template<typename DataT, std::size_t Size>
            memory_input_stream(const DataT(&data)[Size], std::size_t offset = 0) :
                m_data(reinterpret_cast<const byte_t*>(data)),
                m_size(Size * sizeof(DataT)),
                m_read_position(offset) {}

            template<typename DataT>
            memory_input_stream(const DataT data, std::size_t size, std::size_t offset = 0) :
                m_data(reinterpret_cast<const byte_t*>(data)),
                m_size(size),
                m_read_position(offset) {}

            memory_input_stream(const byte_t* data, std::size_t size, std::size_t offset = 0) : 
                m_data(data),
                m_size(size),
                m_read_position(offset) {}

            ~memory_input_stream() = default;

            ACC_DEFAULT_COPYABLE(memory_input_stream);

            memory_input_stream(memory_input_stream&& other)
            {
                m_data = other.m_data;
                m_read_position = other.m_read_position;
                m_size = other.m_size;
                other.m_data = nullptr;
                other.m_read_position = 0;
                other.m_size = 0;
            }

            memory_input_stream& operator=(memory_input_stream&& other)
            {
                m_data = other.m_data;
                m_read_position = other.m_read_position;
                m_size = other.m_size;
                other.m_data = nullptr;
                other.m_read_position = 0;
                other.m_size = 0;
                return *this;
            }

            void seek_read(std::size_t offset, seek_references reference) override
            {
                m_read_position = details::calculate_offset(m_size, m_read_position, offset, reference);
            }

            std::size_t get_read_position() const override
            {
                return m_read_position;
            }

            std::size_t read(byte_t* data, std::size_t size) override
            {
                if (m_read_position >= m_size)
                    return 0;

                std::size_t remaining = m_size - m_read_position;
                std::size_t n = (std::min)(size, remaining);
                std::memcpy(data, m_data + m_read_position, n);
                
                m_read_position += n;

                return n;
            }

            bool at_read_end() const override
            {
                return m_read_position == m_size;
            }

            std::size_t get_size() const { return m_size; }
            const byte_t* get_data() const { return m_data; }
        
        private:
            const byte_t* m_data;
            std::size_t m_size;
            std::size_t m_read_position;
        };

        class memory_output_stream : public output_stream
        {
        public:
            template<typename DataT, std::size_t Size>
            memory_output_stream(DataT(&data)[Size], std::size_t offset = 0) :
                m_data(reinterpret_cast<byte_t*>(data)),
                m_size(Size * sizeof(DataT)),
                m_write_position(offset) {}

            template<typename DataT>
            memory_output_stream(DataT data, std::size_t size, std::size_t offset = 0) :
                m_data(reinterpret_cast<byte_t*>(data)),
                m_size(size),
                m_write_position(offset) {}

            memory_output_stream(byte_t* data, std::size_t size, std::size_t offset = 0) :
                m_data(data),
                m_size(size),
                m_write_position(offset) {}

            ~memory_output_stream() = default;

            ACC_DEFAULT_COPYABLE(memory_output_stream);

            memory_output_stream(memory_output_stream&& other)
            {
                m_data = other.m_data;
                m_write_position = other.m_write_position;
                m_size = other.m_size;
                other.m_data = nullptr;
                other.m_write_position = 0;
                other.m_size = 0;
            }

            memory_output_stream& operator=(memory_output_stream&& other)
            {
                m_data = other.m_data;
                m_write_position = other.m_write_position;
                m_size = other.m_size;
                other.m_data = nullptr;
                other.m_write_position = 0;
                other.m_size = 0;
                return *this;
            }

            void seek_write(std::size_t offset, seek_references reference) override
            {
                m_write_position = details::calculate_offset(m_size, m_write_position, offset, reference);
            }

            std::size_t get_write_position() const override
            {
                return m_write_position;
            }

            std::size_t write(const byte_t* data, std::size_t size) override
            {
                if (m_write_position >= m_size)
                    return 0;

                std::size_t remaining = m_size - m_write_position;
                std::size_t n = (std::min)(size, remaining);
                std::memcpy(m_data + m_write_position, data, n);
                
                m_write_position += n;

                return n;
            }

            bool at_write_end() const override
            {
                return m_write_position == m_size;
            }

            void flush() override {}

            std::size_t get_size() const { return m_size; }
            byte_t* get_data() { return m_data; }

        private:
            byte_t* m_data;
            std::size_t m_size;
            std::size_t m_write_position;
        };

        class memory_stream : public input_output_stream
        {
        public:
            template<typename DataT, std::size_t Size>
            memory_stream(DataT(&data)[Size], std::size_t read_offset = 0, std::size_t write_offset = 0) :
                m_input_stream(data, Size * sizeof(DataT), read_offset),
                m_output_stream(data, Size * sizeof(DataT), write_offset) {}

            template<typename DataT>
            memory_stream(DataT data, std::size_t size, std::size_t read_offset = 0, std::size_t write_offset = 0) :
                m_input_stream(data, size, read_offset),
                m_output_stream(data, size, write_offset) {}

            memory_stream(byte_t* data, std::size_t size, std::size_t read_offset = 0, std::size_t write_offset = 0) :
                m_input_stream(data, size, read_offset),
                m_output_stream(data, size, write_offset) {}
            
            ~memory_stream() = default;

            ACC_DEFAULT_COPYABLE(memory_stream);
            ACC_DEFAULT_MOVABLE(memory_stream);

            void seek_read(std::size_t offset, seek_references reference) override
            {
                m_input_stream.seek_read(offset, reference);
            }

            std::size_t get_read_position() const override
            {
                return m_input_stream.get_read_position();
            }

            std::size_t read(byte_t* data, std::size_t size) override
            {
                return m_input_stream.read(data, size);
            }

            bool at_read_end() const override
            {
                return m_input_stream.at_read_end();
            }

            bool at_write_end() const override
            {
                return m_output_stream.at_write_end();
            }

            void seek_write(std::size_t offset, seek_references reference) override
            {
                m_output_stream.seek_write(offset, reference);
            }

            std::size_t get_write_position() const override
            {
                return m_output_stream.get_write_position();
            }

            std::size_t write(const byte_t* data, std::size_t size) override
            {
                return m_output_stream.write(data, size);
            }

            void flush() override {}

            const byte_t* data() const { return m_input_stream.get_data(); }
            byte_t* data() { return m_output_stream.get_data(); }

            std::size_t size() const { return m_input_stream.get_size(); }

        private:
            memory_input_stream m_input_stream;
            memory_output_stream m_output_stream;
        };

        class vector_output_stream : public output_stream
        {
        public:
            vector_output_stream(std::size_t initial_capacity = 1024, std::size_t write_position = 0) :
                m_write_position(write_position)
            {
                m_vector.reserve(initial_capacity);
            }

            vector_output_stream(const std::vector<byte_t>& vector, std::size_t write_position = 0) :
                m_write_position(write_position),
                m_vector(vector) {}

            vector_output_stream(std::vector<byte_t>&& vector, std::size_t write_position = 0) :
                m_write_position(write_position),
                m_vector(std::move(vector)) {}

            ~vector_output_stream() = default;

            ACC_DEFAULT_COPYABLE(vector_output_stream);
            ACC_DEFAULT_MOVABLE(vector_output_stream);

            void seek_write(std::size_t offset, seek_references reference) override
            {
                m_write_position = details::calculate_offset(m_vector.size(), m_write_position, offset, reference);
            }

            std::size_t get_write_position() const override
            {
                return m_write_position;
            }

            std::size_t write(const byte_t* data, std::size_t size) override
            {
                std::size_t available = m_vector.size() - m_write_position;
                if (size <= available) 
                {
                    std::memcpy(m_vector.data() + m_write_position, data, size);
                    m_write_position += size;
                    return size;
                } 
                else 
                {
                    std::memcpy(m_vector.data() + m_write_position, data, available);
                    m_vector.insert(m_vector.end(), data + available, data + size);
                    m_write_position += size;
                    return size;
                }
            }

            bool at_write_end() const override { return false; }

            void flush() override {}

            void clear() 
            { 
                m_vector.clear();
                m_write_position = 0;
            }

            const byte_t* get_data() const { return m_vector.data(); }
            byte_t* get_data() { return m_vector.data(); }

            std::size_t get_size() const { return m_vector.size(); }

        private:
            std::vector<byte_t> m_vector;
            std::size_t m_write_position;
        };

        class vector_input_stream : public input_stream
        {
        public:
            vector_input_stream(const std::vector<byte_t>& vector, std::size_t read_position = 0) :
                m_read_position(read_position),
                m_vector(vector) {}

            vector_input_stream(std::vector<byte_t>&& vector, std::size_t read_position = 0) :
                m_read_position(read_position),
                m_vector(std::move(vector)) {}

            ~vector_input_stream() = default;

            ACC_DEFAULT_COPYABLE(vector_input_stream);
            ACC_DEFAULT_MOVABLE(vector_input_stream);

            void seek_read(std::size_t offset, seek_references reference) override
            {
                m_read_position = details::calculate_offset(m_vector.size(), m_read_position, offset, reference);
            }

            std::size_t get_read_position() const override
            {
                return m_read_position;
            }

            std::size_t read(byte_t* data, std::size_t size) override
            {
                std::size_t available = m_vector.size() - m_read_position;
                std::size_t bytes_to_read = std::min(available, size); 
                
                std::memcpy(data, m_vector.data() + m_read_position, bytes_to_read);
                m_read_position += bytes_to_read;
                return bytes_to_read;
            }

            bool at_read_end() const override { return m_read_position == m_vector.size(); }

            const byte_t* get_data() const { return m_vector.data(); }
            byte_t* get_data() { return m_vector.data(); }

            std::size_t get_size() const { return m_vector.size(); }

        private:
            std::vector<byte_t> m_vector;
            std::size_t m_read_position;
        };

        class vector_stream : public input_output_stream
        {
        public:
            vector_stream(std::size_t initial_capacity = 1024, std::size_t write_position = 0, std::size_t read_position = 0) :
                m_write_position(write_position),
                m_read_position(read_position)
            {
                m_vector.reserve(initial_capacity);
            }

            vector_stream(const std::vector<byte_t>& vector, std::size_t write_position = 0, std::size_t read_position = 0) :
                m_write_position(write_position),
                m_read_position(read_position),
                m_vector(vector) {}

            vector_stream(std::vector<byte_t>&& vector, std::size_t write_position = 0, std::size_t read_position = 0) :
                m_write_position(write_position),
                m_read_position(read_position),
                m_vector(std::move(vector)) {}

            ~vector_stream() = default;

            ACC_DEFAULT_COPYABLE(vector_stream);
            ACC_DEFAULT_MOVABLE(vector_stream);

            void seek_read(std::size_t offset, seek_references reference) override
            {
                m_read_position = details::calculate_offset(m_vector.size(), m_read_position, offset, reference);
            }

            std::size_t get_read_position() const override
            {
                return m_read_position;
            }

            std::size_t read(byte_t* data, std::size_t size) override
            {
                std::size_t available = m_vector.size() - m_read_position;
                std::size_t bytes_to_read = std::min(available, size); 
                
                std::memcpy(data, m_vector.data() + m_read_position, bytes_to_read);
                m_read_position += bytes_to_read;
                return bytes_to_read;
            }

            bool at_read_end() const override { return m_read_position == m_vector.size(); }

            void seek_write(std::size_t offset, seek_references reference) override
            {
                m_write_position = details::calculate_offset(m_vector.size(), m_write_position, offset, reference);
            }

            std::size_t get_write_position() const override
            {
                return m_write_position;
            }

            std::size_t write(const byte_t* data, std::size_t size) override
            {
                std::size_t available = m_vector.size() - m_write_position;
                if (size <= available) 
                {
                    std::memcpy(m_vector.data() + m_write_position, data, size);
                    m_write_position += size;
                    return size;
                } 
                else 
                {
                    std::memcpy(m_vector.data() + m_write_position, data, available);
                    m_vector.insert(m_vector.end(), data + available, data + size);
                    m_write_position += size;
                    return size;
                }
            }

            bool at_write_end() const override { return false; }

            void flush() override {}

            void clear() 
            { 
                m_vector.clear();
                m_write_position = 0;
                m_read_position = 0;
            }

            const byte_t* get_data() const { return m_vector.data(); }
            byte_t* get_data() { return m_vector.data(); }

            std::size_t get_size() const { return m_vector.size(); }

        private:
            std::vector<byte_t> m_vector;
            std::size_t m_read_position;
            std::size_t m_write_position;
        };
    }
}

#endif